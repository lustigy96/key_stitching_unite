
RESULT_NUMBER = 3
original key(len=1024):

candidate_key(len=170):
11100010001111011011000110011110011011110000000101001001101110111000011100111110101111101000010000010100001001111110111101101110010100000001010110010010000110001011101001
key.find(candidate_key) = -1
levenshtein_edit_dist(key, candidate_key) = 
({'I': 0, 'DIST': 854, 'D': 854, 'F': 0}, [1023, 1020, 1015, 1012, 1011, 1009, 1003, 1002, 1001, 999, 998, 995, 994, 991, 989, 988, 987, 984, 982, 980, 978, 972, 970, 968, 967, 965, 963, 961, 960, 959, 958, 957, 955, 953, 949, 948, 944, 942, 941, 937, 936, 935, 934, 933, 932, 931, 930, 927, 925, 924, 923, 922, 917, 916, 915, 913, 911, 909, 908, 907, 904, 902, 900, 899, 898, 897, 896, 894, 893, 892, 889, 888, 886, 885, 884, 883, 881, 876, 873, 872, 867, 864, 863, 861, 860, 858, 856, 855, 854, 853, 852, 848, 845, 844, 842, 838, 837, 834, 832, 831, 828, 825, 822, 820, 818, 817, 816, 815, 813, 811, 810, 809, 808, 805, 803, 802, 801, 800, 798, 796, 795, 793, 789, 787, 786, 784, 783, 781, 780, 777, 774, 772, 769, 766, 764, 762, 761, 759, 756, 755, 753, 752, 750, 748, 746, 743, 742, 740, 737, 736, 735, 732, 727, 726, 725, 721, 719, 718, 717, 716, 715, 710, 709, 706, 702, 699, 698, 697, 695, 694])
SIMULATION = True
megic_num = 10
sample_len = 50
samples_num = megic_num * (key_length - sample_len) * (sample_len - window_size) = 292200
flip_probability = 0.22
insert_probability = 0.05
delete_probability = 0.05
result_df = 1048190
common_samples_df quantile = 0.6
common_samples_df = 379681
stitch_shift_size = 1
window_size = 20
allowCycle = False

RESULT_NUMBER = 4
original key(len=1024):

candidate_key(len=247):
1000001001001000110100100110100110110010000111101101010100000001011011000001000101001000100010111101011110111001100100101000110010010011000011010110010100001111001000101000101101111010101100010001011100000110110000101101101000100010101100011010010
key.find(candidate_key) = -1
levenshtein_edit_dist(key, candidate_key) = 
({'I': 0, 'DIST': 777, 'D': 777, 'F': 0}, [1020, 1019, 1015, 1014, 1012, 1011, 1009, 1003, 1001, 1000, 998, 997, 996, 995, 991, 990, 989, 988, 987, 984, 983, 982, 981, 978, 977, 972, 970, 969, 968, 965, 963, 961, 960, 959, 957, 955, 953, 952, 951, 949, 947, 946, 944, 942, 937, 935, 934, 933, 932, 931, 930, 927, 926, 924, 921, 917, 915, 914, 912, 911, 909, 906, 904, 902, 901, 900, 899, 895, 893, 889, 888, 887, 881, 876, 875, 873, 872, 867, 864, 863, 861, 859, 857, 854, 853, 852, 851, 848, 845, 844, 842, 841, 840, 839, 837, 836, 834, 832, 830, 829, 828, 827, 825, 824, 822, 821, 819, 818, 813, 812, 808, 805, 803, 802, 801, 800, 798, 796, 795, 793, 792, 789, 788, 787, 786, 784, 782, 781, 779, 777, 776, 774, 773, 771, 769, 766, 764, 763, 762, 761, 760, 759, 758, 757, 755, 753, 751, 750, 748, 747, 743, 742, 741, 740, 739, 737, 736, 734, 732, 727, 721, 720, 719, 715, 710, 706, 702, 701, 699, 698, 696, 695, 692, 690, 689, 686, 683, 682, 679, 678, 677, 675, 673, 669, 668, 666, 661, 654, 653, 651, 650, 647, 646, 639, 638, 637, 636, 634, 632, 630, 628, 626, 625, 624, 622, 619, 616, 615, 614, 613, 611, 609, 607, 606, 605, 604, 603, 601, 598, 597, 596, 594, 593, 592, 591, 588, 585, 581, 579, 578, 576, 575, 574, 572, 569, 568, 567, 566, 565, 564, 560, 559, 556, 555, 550, 549, 547])
SIMULATION = True
megic_num = 30
sample_len = 50
samples_num = megic_num * (key_length - sample_len) * (sample_len - window_size) = 876600
flip_probability = 0.22
insert_probability = 0.05
delete_probability = 0.05
result_df = 1048576
common_samples_df quantile = 0.6
common_samples_df = 385251
stitch_shift_size = 1
window_size = 20
allowCycle = False

RESULT_NUMBER = 5
original key(len=1024):

candidate_key(len=844):

key.find(candidate_key) = -1
levenshtein_edit_dist(key, candidate_key) = 
({'I': 11, 'DIST': 313, 'D': 191, 'F': 111}, [1020, 1018, 1017, 1016, 1012, 1009, 1008, 1007, 1006, 1003, 1002, 1001, 999, 997, 996, 995, 993, 992, 991, 989, 988, 987, 986, 985, 983, 982, 981, 979, 978, 977, 976, 975, 974, 972, 970, 969, 968, 967, 966, 964, 963, 962, 961, 960, 959, 958, 957, 955, 954, 953, 950, 949, 948, 947, 944, 942, 937, 936, 935, 933, 932, 930, 929, 927, 925, 923, 922, 921, 920, 919, 917, 915, 914, 913, 911, 910, 909, 908, 906, 905, 902, 901, 900, 898, 897, 895, 894, 893, 892, 891, 889, 888, 887, 886, 881, 880, 879, 878, 877, 876, 873, 872, 871, 869, 867, 866, 864, 863, 862, 861, 859, 858, 856, 855, 854, 853, 851, 850, 849, 847, 846, 845, 843, 841, 840, 839, 838, 837, 836, 835, 832, 831, 830, 829, 828, 827, 826, 824, 823, 822, 821, 819, 817, 816, 813, 811, 810, 809, 808, 805, 803, 802, 801, 800, 799, 797, 796, 793, 792, 791, 790, 789, 787, 786, 784, 783, 782, 779, 777, 774, 773, 772, 771, 769, 766, 765, 764, 762, 761, 759, 758, 756, 755, 754, 753, 752, 750, 749, 747, 746, 745, 743, 742, 741, 739, 738, 737, 735, 732, 731, 728, 727, 724, 721, 720, 719, 715, 714, 713, 712, 710, 709, 708, 707, 706, 705, 704, 702, 701, 700, 699, 698, 697, 695, 694, 692, 691, 690, 688, 686, 685, 683, 682, 681, 680, 679, 677, 675, 673, 672, 669, 667, 666, 665, 664, 662, 661, 658, 657, 656, 654, 652, 651, 650, 649, 647, 646, 645, 644, 642, 641, 639, 638, 637, 636, 635, 633, 632, 630, 629, 627, 626, 625, 622, 621, 620, 619, 618, 616, 615, 613, 611, 610, 609, 608, 607, 606, 605, 603, 602, 601, 600, 598, 596, 595, 593, 592, 591, 589, 587, 586, 585, 581, 580, 578, 577, 576, 573, 572, 571, 570, 569, 568, 567, 566, 565, 560, 558, 557, 556, 554, 553, 552, 551, 550, 549, 548, 546, 544, 541, 540, 538, 537, 536, 535, 534, 532, 531, 529, 528, 527, 525, 524, 522, 521, 519, 518, 517, 516, 515, 514, 512, 511, 508, 507, 505, 503, 502, 500, 499, 497, 495, 494, 492, 491, 490, 487, 485, 484, 482, 481, 479, 478, 477, 476, 475, 474, 472, 471, 469, 467, 466, 465, 463, 462, 461, 460, 459, 457, 455, 453, 452, 451, 450, 449, 447, 446, 444, 443, 442, 441, 440, 439, 437, 436, 435, 432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 418, 417, 416, 414, 413, 412, 411, 409, 408, 407, 405, 403, 402, 401, 400, 399, 398, 396, 392, 391, 389, 388, 386, 385, 384, 382, 380, 378, 377, 376, 374, 373, 372, 370, 369, 368, 367, 366, 363, 360, 359, 358, 357, 356, 355, 354, 353, 352, 350, 349, 348, 347, 343, 342, 341, 340, 338, 337, 336, 334, 332, 331, 330, 328, 326, 325, 323, 321, 320, 319, 318, 317, 316, 314, 312, 310, 308, 305, 304, 303, 302, 301, 300, 298, 297, 296, 295, 293, 292, 291, 288, 287, 286, 285, 284, 283, 282, 280, 279, 276, 275, 274, 270, 269, 268, 266, 265, 263, 262, 261, 260, 258, 257, 256, 255, 254, 252, 248, 244, 243, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 215, 214, 213, 212, 211, 210, 209, 208, 206, 205, 204, 203, 199, 198, 197, 195, 192, 191, 189, 188, 186, 184, 183, 181, 180, 179, 177, 175, 174, 172, 171, 169, 168, 167, 166, 164, 163, 161, 160, 158, 157, 156, 154, 152, 151, 149, 147, 146, 145, 144, 143, 142, 141, 139, 137, 136, 135, 132, 131, 130, 129, 128, 127, 126, 125, 123, 122, 119, 118, 117, 116, 115, 114, 112, 111, 109, 108, 106, 105, 104, 102, 100, 99, 98, 97, 96, 95, 94, 92, 89, 87, 86, 85, 84, 83, 82, 81, 80, 79, 77, 76, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 54, 53, 52, 51, 50, 49, 48, 46, 45, 43, 42, 41, 40, 39, 38, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 25, 23, 21, 20, 19, 18, 16, 15, 12, 11, 10, 8, 7, 6, 4, 3])
SIMULATION = True
megic_num = 50
sample_len = 50
samples_num = megic_num * (key_length - sample_len) * (sample_len - window_size) = 1461000
flip_probability = 0.22
insert_probability = 0.05
delete_probability = 0.05
result_df = 1048576
common_samples_df quantile = 0.6
common_samples_df = 379746
stitch_shift_size = 1
window_size = 20
allowCycle = False
